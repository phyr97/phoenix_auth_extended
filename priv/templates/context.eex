defmodule <%= inspect @context_module_name %> do
  @moduledoc """
  The <%= @context_name %> context.
  """

  import Ecto.Query, warn: false

  alias <%= inspect @context_module_name %>.{<%= @entity_name %>, <%= @entity_name %>Token<%= if @options[:basic_identifier] == "email", do: ", #{@entity_name}Notifier" %>}
  alias <%= @app_module_name %>.Repo
  alias <%= @app_module_name %>.Validation

  ## Database getters

  @doc """
  Gets a <%= @entity_name_downcase %> by <%= @options[:basic_identifier] %>.

  ## Examples

      iex> get_<%= @entity_name_downcase %>_by_<%= @options[:basic_identifier] %>("foo@example.com")
      %<%= @entity_name %>{}

      iex> get_<%= @entity_name_downcase %>_by_<%= @options[:basic_identifier] %>("unknown@example.com")
      nil

  """
  def get_<%= @entity_name_downcase %>_by_<%= @options[:basic_identifier] %>(<%= @options[:basic_identifier] %>) when is_binary(<%= @options[:basic_identifier] %>) do
    Repo.get_by(<%= @entity_name %>, <%= @options[:basic_identifier] %>: <%= @options[:basic_identifier] %>)
  end

  <%= if @options[:basic] do %>
  @doc """
  Gets a <%= @entity_name_downcase %> by <%= @options[:basic_identifier] %> and password.

  ## Examples

      iex> get_<%= @entity_name_downcase %>_by_<%= @options[:basic_identifier] %>_and_password("foo@example.com", "correct_password")
      %<%= @entity_name %>{}

      iex> get_<%= @entity_name_downcase %>_by_<%= @options[:basic_identifier] %>_and_password("foo@example.com", "invalid_password")
      nil

  """
  def get_<%= @entity_name_downcase %>_by_<%= @options[:basic_identifier] %>_and_password(<%= @options[:basic_identifier] %>, password)
      when is_binary(<%= @options[:basic_identifier] %>) and is_binary(password) do
    <%= @entity_name_downcase %> = Repo.get_by(<%= @entity_name %>, <%= @options[:basic_identifier] %>: <%= @options[:basic_identifier] %>)
    if Validation.valid_password?(<%= @entity_name_downcase %>, password), do: <%= @entity_name_downcase %>
  end
  <% end %>

  <%= if @options[:oauth] do %>
  @doc """
  Gets a <%= @entity_name_downcase %> by provider and provider_uid.

  ## Examples

      iex> get_<%= @entity_name_downcase %>_by_provider("google", "12345")
      %<%= @entity_name %>{}

      iex> get_<%= @entity_name_downcase %>_by_provider("github", "unknown_uid")
      nil

  """
  def get_<%= @entity_name_downcase %>_by_provider(provider, uid) when is_binary(provider) and is_binary(uid) do
    Repo.get_by(<%= @entity_name %>, provider: provider, provider_uid: uid)
  end

  @doc """
  Gets or creates a <%= @entity_name_downcase %> by OAuth credentials.

  ## Examples

      iex> get_or_create_<%= @entity_name_downcase %>(%{<%= @options[:basic_identifier] %>: "user@example", provider: "github", provider_uid: "123"})
      {:ok, %<%= @entity_name %>{}}

      iex> get_or_create_<%= @entity_name_downcase %>(%{<%= @options[:basic_identifier] %>: "invalid"})
      {:error, %Ecto.Changeset{}}

  """
  def get_or_create_<%= @entity_name_downcase %>(attrs) do
    %{provider: provider, provider_uid: uid} = attrs

    case get_<%= @entity_name_downcase %>_by_provider(provider, uid) do
      nil -> register_<%= @entity_name_downcase %>(attrs)
      <%= @entity_name_downcase %> -> {:ok, <%= @entity_name_downcase %>}
    end
  end
  <% end %>

  @doc """
  Gets a single <%= @entity_name_downcase %>.

  Raises `Ecto.NoResultsError` if the <%= @entity_name %> does not exist.

  ## Examples

      iex> get_<%= @entity_name_downcase %>!(123)
      %<%= @entity_name %>{}

      iex> get_<%= @entity_name_downcase %>!(456)
      ** (Ecto.NoResultsError)

  """
  def get_<%= @entity_name_downcase %>!(id), do: Repo.get!(<%= @entity_name %>, id)

  ## Registration

  @doc """
  Registers a <%= @entity_name_downcase %> with either basic credentials or passkeys.

  ## Examples

      iex> register_<%= @entity_name_downcase %>(%{<%= @options[:basic_identifier] %>: "test@example.com", password: "secret"})
      {:ok, %<%= @entity_name %>{}}

      <%= if @options[:passkey] do %>
      iex> register_<%= @entity_name_downcase %>(%{keys: [%{credential_id: "abc", public_key: "xyz"}]})
      {:ok, %<%= @entity_name %>{}}
      <% end %>

      iex> register_<%= @entity_name_downcase %>(%{<%= @options[:basic_identifier] %>: "invalid"})
      {:error, %Ecto.Changeset{}}
  """
  def register_<%= @entity_name_downcase %>(attrs) do
    %<%= @entity_name %>{}
    |> change_<%= @entity_name_downcase %>(attrs)
    |> Repo.insert()
  end

  @doc """
  Creates a changeset for a <%= @entity_name_downcase %> based on the provided attributes.
  <%= if @options[:passkey] do %>Uses passkey_changeset if keys are present, <% end %><%= if @options[:oauth] do %>Uses oauth_changeset if provider is present, <% end %>otherwise basic_changeset.

  ## Examples

      iex> change_<%= @entity_name_downcase %>(<%= @entity_name_downcase %>, %{<%= @options[:basic_identifier] %>: "test@example.com"})
      %Ecto.Changeset{...}

      <%= if @options[:passkey] do %>
      iex> change_<%= @entity_name_downcase %>(<%= @entity_name_downcase %>, %{keys: [%{credential_id: "abc"}]})
      %Ecto.Changeset{...}
      <% end %>
  """
  def change_<%= @entity_name_downcase %>(<%= @entity_name_downcase %>, attrs, opts \\ [])
  <%= if @options[:passkey] do %>
  def change_<%= @entity_name_downcase %>(<%= @entity_name_downcase %>, %{keys: _} = attrs, opts), do: <%= @entity_name %>.passkey_changeset(<%= @entity_name_downcase %>, attrs, opts)
  <% end %>
  <%= if @options[:oauth] do %>
  def change_<%= @entity_name_downcase %>(<%= @entity_name_downcase %>, %{provider: _} = attrs, opts), do: <%= @entity_name %>.oauth_changeset(<%= @entity_name_downcase %>, attrs, opts)
  <% end %>
  def change_<%= @entity_name_downcase %>(<%= @entity_name_downcase %>, attrs, opts), do: <%= @entity_name %>.basic_changeset(<%= @entity_name_downcase %>, attrs, opts)

  <%= if @options[:basic] do %>
  @doc """
  Returns an `%Ecto.Changeset{}` for tracking <%= @entity_name_downcase %> changes.

  ## Examples

      iex> change_<%= @entity_name_downcase %>_registration(<%= @entity_name_downcase %>)
      %Ecto.Changeset{data: %<%= @entity_name %>{}}

  """
  def change_<%= @entity_name_downcase %>_registration(%<%= @entity_name %>{} = <%= @entity_name_downcase %>, attrs \\ %{}) do
    <%= @entity_name %>.basic_changeset(<%= @entity_name_downcase %>, attrs, hash_password: false, validate_<%= @options[:basic_identifier] %>: false)
  end
  <% end %>

  ## Settings

  <%= if @options[:basic_identifier] == "email" do %>
  @doc """
  Returns an `%Ecto.Changeset{}` for changing the <%= @entity_name_downcase %> email.

  ## Examples

      iex> change_<%= @entity_name_downcase %>_email(<%= @entity_name_downcase %>)
      %Ecto.Changeset{data: %<%= @entity_name %>{}}

  """
  def change_<%= @entity_name_downcase %>_email(<%= @entity_name_downcase %>, attrs \\ %{}) do
    <%= @entity_name %>.basic_changeset(<%= @entity_name_downcase %>, attrs, validate_email: false, validate_email_change: true)
  end

  @doc """
  Emulates that the email will change without actually changing
  it in the database.

  ## Examples

      iex> apply_<%= @entity_name_downcase %>_email(<%= @entity_name_downcase %>, "valid password", %{email: ...})
      {:ok, %<%= @entity_name %>{}}

      iex> apply_<%= @entity_name_downcase %>_email(<%= @entity_name_downcase %>, "invalid password", %{email: ...})
      {:error, %Ecto.Changeset{}}

  """
  def apply_<%= @entity_name_downcase %>_email(<%= @entity_name_downcase %>, password, attrs) do
    <%= @entity_name_downcase %>
    |> <%= @entity_name %>.basic_changeset(attrs, validate_email_change: true, validate_password: false)
    |> <%= @entity_name %>.validate_current_password(password)
    |> Ecto.Changeset.apply_action(:update)
  end

  @doc """
  Updates the <%= @entity_name_downcase %> email using the given token.

  If the token matches, the <%= @entity_name_downcase %> email is updated and the token is deleted.
  The confirmed_at date is also updated to the current time.
  """
  def update_<%= @entity_name_downcase %>_email(<%= @entity_name_downcase %>, token) do
    context = "change:#{<%= @entity_name_downcase %>.email}"

    with {:ok, query} <- <%= @entity_name %>Token.verify_change_email_token_query(token, context),
         %<%= @entity_name %>Token{sent_to: email} <- Repo.one(query),
         {:ok, _} <- Repo.transaction(<%= @entity_name_downcase %>_email_multi(<%= @entity_name_downcase %>, email, context)) do
      :ok
    else
      _ -> :error
    end
  end

  defp <%= @entity_name_downcase %>_email_multi(<%= @entity_name_downcase %>, email, context) do
    changeset =
      <%= @entity_name_downcase %>
      |> <%= @entity_name %>.basic_changeset(%{email: email}, validate_password: false)
      |> <%= @entity_name %>.confirm_changeset()

    Ecto.Multi.new()
    |> Ecto.Multi.update(:<%= @entity_name_downcase %>, changeset)
    |> Ecto.Multi.delete_all(:tokens, <%= @entity_name %>Token.by_<%= @entity_name_downcase %>_and_contexts_query(<%= @entity_name_downcase %>, [context]))
  end

  @doc ~S"""
  Delivers the update email instructions to the given <%= @entity_name_downcase %>.

  ## Examples

      iex> deliver_<%= @entity_name_downcase %>_update_email_instructions(<%= @entity_name_downcase %>, current_email, &url(~p"/<%= @entity_name_downcase %>s/settings/confirm_email/#{&1}"))
      {:ok, %{to: ..., body: ...}}

  """
  def deliver_<%= @entity_name_downcase %>_update_email_instructions(%<%= @entity_name %>{} = <%= @entity_name_downcase %>, current_email, update_email_url_fun)
      when is_function(update_email_url_fun, 1) do
    {encoded_token, <%= @entity_name_downcase %>_token} = <%= @entity_name %>Token.build_email_token(<%= @entity_name_downcase %>, "change:#{current_email}")

    Repo.insert!(<%= @entity_name_downcase %>_token)
    <%= if @options[:basic_identifier] == "email" do %>
    <%= @entity_name %>Notifier.deliver_update_email_instructions(<%= @entity_name_downcase %>, update_email_url_fun.(encoded_token))
    <% end %>
  end
  <% end %>

  <%= if @options[:basic] do %>
  @doc """
  Returns an `%Ecto.Changeset{}` for changing the <%= @entity_name_downcase %> password.

  ## Examples

      iex> change_<%= @entity_name_downcase %>_password(<%= @entity_name_downcase %>)
      %Ecto.Changeset{data: %<%= @entity_name %>{}}

  """
  def change_<%= @entity_name_downcase %>_password(<%= @entity_name_downcase %>, attrs \\ %{}) do
    <%= @entity_name %>.basic_changeset(<%= @entity_name_downcase %>, attrs, hash_password: false)
  end

  @doc """
  Updates the <%= @entity_name_downcase %> password.

  ## Examples

      iex> update_<%= @entity_name_downcase %>_password(<%= @entity_name_downcase %>, "valid password", %{password: ...})
      {:ok, %<%= @entity_name %>{}}

      iex> update_<%= @entity_name_downcase %>_password(<%= @entity_name_downcase %>, "invalid password", %{password: ...})
      {:error, %Ecto.Changeset{}}

  """
  def update_<%= @entity_name_downcase %>_password(<%= @entity_name_downcase %>, password, attrs) do
    changeset =
      <%= @entity_name_downcase %>
      |> <%= @entity_name %>.basic_changeset(attrs)
      |> <%= @entity_name %>.validate_current_password(password)

    Ecto.Multi.new()
    |> Ecto.Multi.update(:<%= @entity_name_downcase %>, changeset)
    |> Ecto.Multi.delete_all(:tokens, <%= @entity_name %>Token.by_<%= @entity_name_downcase %>_and_contexts_query(<%= @entity_name_downcase %>, :all))
    |> Repo.transaction()
    |> case do
      {:ok, %{<%= @entity_name_downcase %>: <%= @entity_name_downcase %>}} -> {:ok, <%= @entity_name_downcase %>}
      {:error, :<%= @entity_name_downcase %>, changeset, _} -> {:error, changeset}
    end
  end
  <% end %>

  ## Session

  @doc """
  Generates a session token.
  """
  def generate_<%= @entity_name_downcase %>_session_token(<%= @entity_name_downcase %>) do
    <%= @entity_name_downcase %>
    |> <%= @entity_name %>Token.build_session_token()
    |> Repo.insert()
  end

  @doc """
  Retrieves a `<%= @entity_name %>` by querying a valid token.
  """
  def get_<%= @entity_name_downcase %>_by_token(token, type \\ "session") when is_binary(token) do
    validity_days = <%= @entity_name %>Token.validity_days(type)

    query =
      from token in by_token_and_type_query(token, type),
        join: <%= @entity_name_downcase %> in assoc(token, :<%= @entity_name_downcase %>),
        where: token.inserted_at > ago(^validity_days, "day"),
        order_by: [desc: token.inserted_at],
        limit: 1,
        select: <%= @entity_name_downcase %>

    Repo.one(query)
  end

  def by_token_and_type_query(token, type) do
    from <%= @entity_name %>Token, where: [value: ^token, type: ^type]
  end

  @doc """
  Deletes the signed token with the given context.
  """
  def delete_<%= @entity_name_downcase %>_session_token(token) do
    Repo.delete_all(<%= @entity_name %>Token.by_token_and_context_query(token, "session"))
    :ok
  end

  <%= if @options[:basic_identifier] == "email" do %>
  ## Confirmation

  @doc ~S"""
  Delivers the confirmation email instructions to the given <%= @entity_name_downcase %>.

  ## Examples

      iex> deliver_<%= @entity_name_downcase %>_confirmation_instructions(<%= @entity_name_downcase %>, &url(~p"/<%= @entity_name_downcase %>s/confirm/#{&1}"))
      {:ok, %{to: ..., body: ...}}

      iex> deliver_<%= @entity_name_downcase %>_confirmation_instructions(confirmed_<%= @entity_name_downcase %>, &url(~p"/<%= @entity_name_downcase %>s/confirm/#{&1}"))
      {:error, :already_confirmed}

  """
  def deliver_<%= @entity_name_downcase %>_confirmation_instructions(%<%= @entity_name %>{} = <%= @entity_name_downcase %>, confirmation_url_fun)
      when is_function(confirmation_url_fun, 1) do
    if <%= @entity_name_downcase %>.confirmed_at do
      {:error, :already_confirmed}
    else
      {encoded_token, <%= @entity_name_downcase %>_token} = <%= @entity_name %>Token.build_email_token(<%= @entity_name_downcase %>, "confirm")
      Repo.insert!(<%= @entity_name_downcase %>_token)
      <%= @entity_name %>Notifier.deliver_confirmation_instructions(<%= @entity_name_downcase %>, confirmation_url_fun.(encoded_token))
    end
  end

  @doc """
  Confirms a <%= @entity_name_downcase %> by the given token.

  If the token matches, the <%= @entity_name_downcase %> account is marked as confirmed
  and the token is deleted.
  """
  def confirm_<%= @entity_name_downcase %>(token) do
    with {:ok, query} <- <%= @entity_name %>Token.verify_email_token_query(token, "confirm"),
         %<%= @entity_name %>{} = <%= @entity_name_downcase %> <- Repo.one(query),
         {:ok, %{<%= @entity_name_downcase %>: <%= @entity_name_downcase %>}} <- Repo.transaction(confirm_<%= @entity_name_downcase %>_multi(<%= @entity_name_downcase %>)) do
      {:ok, <%= @entity_name_downcase %>}
    else
      _ -> :error
    end
  end

  defp confirm_<%= @entity_name_downcase %>_multi(<%= @entity_name_downcase %>) do
    Ecto.Multi.new()
    |> Ecto.Multi.update(:<%= @entity_name_downcase %>, <%= @entity_name %>.confirm_changeset(<%= @entity_name_downcase %>))
    |> Ecto.Multi.delete_all(:tokens, <%= @entity_name %>Token.by_<%= @entity_name_downcase %>_and_contexts_query(<%= @entity_name_downcase %>, ["confirm"]))
  end

  ## Reset password

  @doc ~S"""
  Delivers the reset password email to the given <%= @entity_name_downcase %>.

  ## Examples

      iex> deliver_<%= @entity_name_downcase %>_reset_password_instructions(<%= @entity_name_downcase %>, &url(~p"/<%= @entity_name_downcase %>s/reset_password/#{&1}"))
      {:ok, %{to: ..., body: ...}}

  """
  def deliver_<%= @entity_name_downcase %>_reset_password_instructions(%<%= @entity_name %>{} = <%= @entity_name_downcase %>, reset_password_url_fun)
      when is_function(reset_password_url_fun, 1) do
    {encoded_token, <%= @entity_name_downcase %>_token} = <%= @entity_name %>Token.build_email_token(<%= @entity_name_downcase %>, "reset_password")
    Repo.insert!(<%= @entity_name_downcase %>_token)
    <%= @entity_name %>Notifier.deliver_reset_password_instructions(<%= @entity_name_downcase %>, reset_password_url_fun.(encoded_token))
  end

  @doc """
  Gets the <%= @entity_name_downcase %> by reset password token.

  ## Examples

      iex> get_<%= @entity_name_downcase %>_by_reset_password_token("validtoken")
      %<%= @entity_name %>{}

      iex> get_<%= @entity_name_downcase %>_by_reset_password_token("invalidtoken")
      nil

  """
  def get_<%= @entity_name_downcase %>_by_reset_password_token(token) do
    with {:ok, query} <- <%= @entity_name %>Token.verify_email_token_query(token, "reset_password"),
         %<%= @entity_name %>{} = <%= @entity_name_downcase %> <- Repo.one(query) do
      <%= @entity_name_downcase %>
    else
      _ -> nil
    end
  end

  @doc """
  Resets the <%= @entity_name_downcase %> password.

  ## Examples

      iex> reset_<%= @entity_name_downcase %>_password(<%= @entity_name_downcase %>, %{password: "new long password", password_confirmation: "new long password"})
      {:ok, %<%= @entity_name %>{}}

      iex> reset_<%= @entity_name_downcase %>_password(<%= @entity_name_downcase %>, %{password: "valid", password_confirmation: "not the same"})
      {:error, %Ecto.Changeset{}}

  """
  def reset_<%= @entity_name_downcase %>_password(<%= @entity_name_downcase %>, attrs) do
    Ecto.Multi.new()
    |> Ecto.Multi.update(:<%= @entity_name_downcase %>, <%= @entity_name %>.basic_changeset(<%= @entity_name_downcase %>, attrs))
    |> Ecto.Multi.delete_all(:tokens, <%= @entity_name %>Token.by_<%= @entity_name_downcase %>_and_contexts_query(<%= @entity_name_downcase %>, :all))
    |> Repo.transaction()
    |> case do
      {:ok, %{<%= @entity_name_downcase %>: <%= @entity_name_downcase %>}} -> {:ok, <%= @entity_name_downcase %>}
      {:error, :<%= @entity_name_downcase %>, changeset, _} -> {:error, changeset}
    end
  end
  <% end %>

  <%= if @options[:passkey] do %>
  # Passkeys
  @doc """
  Retrieves a `<%= @entity_name %>` by querying an associated `:key_id`.
  """
  def get_by_key_id(key_id) when is_binary(key_id) do
    query =
      from <%= @entity_name_downcase %> in <%= @entity_name %>,
        join: key in assoc(<%= @entity_name_downcase %>, :keys),
        preload: [:keys],
        where: key.key_id == ^key_id

    Repo.one(query)
  end
  <% end %>
end
