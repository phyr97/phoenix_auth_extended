defmodule <%= inspect @app_web_module %>.Auth do
  use <%= inspect @app_web_module %>, :verified_routes

  import Plug.Conn
  import Phoenix.Controller

  alias <%= @app_module_name %>.<%= @context_name %>
  alias <%= @app_module_name %>.<%= @context_name %>.<%= @entity_name %>Token

  # Make the remember me cookie valid for 60 days.
  # If you want bump or reduce this value, also change
  # the token expiry itself in <%= @entity_name %>Token.
  @max_age 60 * 60 * 24 * 60
  @remember_me_cookie "_<%= @app_name %>_web_<%= @entity_name_downcase %>_remember_me"
  @remember_me_options [sign: true, max_age: @max_age, same_site: "Lax"]

  @doc """
  Logs the <%= @entity_name_downcase %> in.

  It renews the session ID and clears the whole session
  to avoid fixation attacks. See the renew_session
  function to customize this behaviour.

  It also sets a `:live_socket_id` key in the session,
  so LiveView sessions are identified and automatically
  disconnected on log out. The line can be safely removed
  if you are not using LiveView.
  """
  def log_in_<%= @entity_name_downcase %>(conn, <%= @entity_name_downcase %>, params \\ %{}) do
    {:ok, %<%= @entity_name %>Token{value: token}} = <%= @context_name %>.generate_<%= @entity_name_downcase %>_session_token(<%= @entity_name_downcase %>)
    <%= @entity_name_downcase %>_return_to = get_session(conn, :<%= @entity_name_downcase %>_return_to)

    conn
    |> renew_session()
    |> put_token_in_session(token)
    |> maybe_write_remember_me_cookie(token, params)
    |> redirect(to: <%= @entity_name_downcase %>_return_to || signed_in_path(conn))
  end

  defp maybe_write_remember_me_cookie(conn, token, %{"remember_me" => "true"}) do
    put_resp_cookie(conn, @remember_me_cookie, token, @remember_me_options)
  end

  defp maybe_write_remember_me_cookie(conn, _token, _params) do
    conn
  end

  # This function renews the session ID and erases the whole
  # session to avoid fixation attacks. If there is any data
  # in the session you may want to preserve after log in/log out,
  # you must explicitly fetch the session data before clearing
  # and then immediately set it after clearing, for example:
  #
  #     defp renew_session(conn) do
  #       preferred_locale = get_session(conn, :preferred_locale)
  #
  #       conn
  #       |> configure_session(renew: true)
  #       |> clear_session()
  #       |> put_session(:preferred_locale, preferred_locale)
  #     end
  #
  defp renew_session(conn) do
    delete_csrf_token()

    conn
    |> configure_session(renew: true)
    |> clear_session()
  end

  @doc """
  Logs the <%= @entity_name_downcase %> out.

  It clears all session data for safety. See renew_session.
  """
  def log_out_<%= @entity_name_downcase %>(conn) do
    <%= @entity_name_downcase %>_token = get_session(conn, :<%= @entity_name_downcase %>_token)
    <%= @entity_name_downcase %>_token && <%= @context_name %>.delete_<%= @entity_name_downcase %>_session_token(<%= @entity_name_downcase %>_token)

    if live_socket_id = get_session(conn, :live_socket_id) do
      <%= inspect @app_web_module %>.Endpoint.broadcast(live_socket_id, "disconnect", %{})
    end

    conn
    |> renew_session()
    |> delete_resp_cookie(@remember_me_cookie)
    |> redirect(to: ~p"/")
  end

  @doc """
  Authenticates the <%= @entity_name_downcase %> by looking into the session
  and remember me token.
  """
  def fetch_current_<%= @entity_name_downcase %>(conn, _opts) do
    {<%= @entity_name_downcase %>_token, conn} = ensure_<%= @entity_name_downcase %>_token(conn)
    <%= @entity_name_downcase %> = <%= @entity_name_downcase %>_token && <%= @context_name %>.get_<%= @entity_name_downcase %>_by_token(<%= @entity_name_downcase %>_token)
    assign(conn, :current_<%= @entity_name_downcase %>, <%= @entity_name_downcase %>)
  end

  defp ensure_<%= @entity_name_downcase %>_token(conn) do
    if token = get_session(conn, :<%= @entity_name_downcase %>_token) do
      {token, conn}
    else
      conn = fetch_cookies(conn, signed: [@remember_me_cookie])

      if token = conn.cookies[@remember_me_cookie] do
        {token, put_token_in_session(conn, token)}
      else
        {nil, conn}
      end
    end
  end

  @doc """
  Handles mounting and authenticating the current_<%= @entity_name_downcase %> in LiveViews.

  ## `on_mount` arguments

    * `:mount_current_<%= @entity_name_downcase %>` - Assigns current_<%= @entity_name_downcase %>
      to socket assigns based on <%= @entity_name_downcase %>_token, or nil if
      there's no <%= @entity_name_downcase %>_token or no matching <%= @entity_name_downcase %>.

    * `:ensure_authenticated` - Authenticates the <%= @entity_name_downcase %> from the session,
      and assigns the current_<%= @entity_name_downcase %> to socket assigns based
      on <%= @entity_name_downcase %>_token.
      Redirects to login page if there's no logged <%= @entity_name_downcase %>.

    * `:redirect_if_<%= @entity_name_downcase %>_is_authenticated` - Authenticates the <%= @entity_name_downcase %> from the session.
      Redirects to signed_in_path if there's a logged <%= @entity_name_downcase %>.

  ## Examples

  Use the `on_mount` lifecycle macro in LiveViews to mount or authenticate
  the current_<%= @entity_name_downcase %>:

      defmodule <%= inspect @app_web_module %>.PageLive do
        use <%= inspect @app_web_module %>, :live_view

        on_mount {<%= inspect @app_web_module %>.Auth, :mount_current_<%= @entity_name_downcase %>}
        ...
      end

  Or use the `live_session` of your router to invoke the on_mount callback:

      live_session :authenticated, on_mount: [{<%= inspect @app_web_module %>.Auth, :ensure_authenticated}] do
        live "/profile", ProfileLive, :index
      end
  """
  def on_mount(:mount_current_<%= @entity_name_downcase %>, _params, session, socket) do
    {:cont, mount_current_<%= @entity_name_downcase %>(socket, session)}
  end

  def on_mount(:ensure_authenticated, _params, session, socket) do
    socket = mount_current_<%= @entity_name_downcase %>(socket, session)

    if socket.assigns.current_<%= @entity_name_downcase %> do
      {:cont, socket}
    else
      socket =
        socket
        |> Phoenix.LiveView.put_flash(:error, "You must log in to access this page.")
        |> Phoenix.LiveView.redirect(to: ~p"/<%= @entity_name_downcase %>s/log_in")

      {:halt, socket}
    end
  end

  def on_mount(:redirect_if_<%= @entity_name_downcase %>_is_authenticated, _params, session, socket) do
    socket = mount_current_<%= @entity_name_downcase %>(socket, session)

    if socket.assigns.current_<%= @entity_name_downcase %> do
      {:halt, Phoenix.LiveView.redirect(socket, to: signed_in_path(socket))}
    else
      {:cont, socket}
    end
  end

  defp mount_current_<%= @entity_name_downcase %>(socket, session) do
    Phoenix.Component.assign_new(socket, :current_<%= @entity_name_downcase %>, fn ->
      if <%= @entity_name_downcase %>_token = session["<%= @entity_name_downcase %>_token"] do
        <%= @context_name %>.get_<%= @entity_name_downcase %>_by_token(<%= @entity_name_downcase %>_token)
      end
    end)
  end

  @doc """
  Used for routes that require the <%= @entity_name_downcase %> to not be authenticated.
  """
  def redirect_if_<%= @entity_name_downcase %>_is_authenticated(conn, _opts) do
    if conn.assigns[:current_<%= @entity_name_downcase %>] do
      conn
      |> redirect(to: signed_in_path(conn))
      |> halt()
    else
      conn
    end
  end

  @doc """
  Used for routes that require the <%= @entity_name_downcase %> to be authenticated.

  If you want to enforce the <%= @entity_name_downcase %> email is confirmed before
  they use the application at all, here would be a good place.
  """
  def require_authenticated_<%= @entity_name_downcase %>(conn, _opts) do
    if conn.assigns[:current_<%= @entity_name_downcase %>] do
      conn
    else
      conn
      |> put_flash(:error, "You must log in to access this page.")
      |> maybe_store_return_to()
      |> redirect(to: ~p"/<%= @entity_name_downcase %>s/log_in")
      |> halt()
    end
  end

  defp put_token_in_session(conn, token) do
    conn
    |> put_session(:<%= @entity_name_downcase %>_token, token)
    |> put_session(:live_socket_id, "<%= @entity_name_downcase %>s_sessions:#{Base.url_encode64(token)}")
  end

  defp maybe_store_return_to(%{method: "GET"} = conn) do
    put_session(conn, :<%= @entity_name_downcase %>_return_to, current_path(conn))
  end

  defp maybe_store_return_to(conn), do: conn

  defp signed_in_path(_conn), do: ~p"/"
end
